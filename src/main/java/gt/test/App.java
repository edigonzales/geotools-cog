/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gt.test;

import java.awt.geom.Point2D;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.Set;

import org.geotools.api.referencing.crs.CoordinateReferenceSystem;
import org.geotools.api.referencing.operation.MathTransform;
import org.geotools.api.referencing.operation.TransformException;
import org.geotools.coverage.grid.GridCoverage2D;
import org.geotools.gce.geotiff.GeoTiffReader;
import org.geotools.geometry.Position2D;
import org.geotools.referencing.CRS;

import it.geosolutions.imageio.core.BasicAuthURI;
import it.geosolutions.imageio.plugins.cog.CogImageReadParam;
import it.geosolutions.imageioimpl.plugins.cog.CogImageInputStreamSpi;
import it.geosolutions.imageioimpl.plugins.cog.CogImageReaderSpi;
import it.geosolutions.imageioimpl.plugins.cog.CogSourceSPIProvider;
import it.geosolutions.imageioimpl.plugins.cog.HttpRangeReader;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) throws IOException {
        System.out.println(new App().getGreeting());
        
        // https://data.geo.admin.ch/ch.swisstopo.swissalti3d/swissalti3d_2019_2614-1258/swissalti3d_2019_2614-1258_0.5_2056_5728.tif
        File file = new File("/Users/stefan/Downloads/swissalti3d_2019_2614-1258_0.5_2056_5728.tif");
        //URL fileUrl = new URL("https://data.geo.admin.ch/ch.swisstopo.swissalti3d/swissalti3d_2019_2614-1258/swissalti3d_2019_2614-1258_0.5_2056_5728.tif");
        URL fileUrl = new URL("https://files.geo.so.ch/ch.so.agi.lidar_2014.dtm/aktuell/ch.so.agi.lidar_2014.dtm.tif");
        
        String url =
                "https://s3-us-west-2.amazonaws.com/sentinel-cogs/sentinel-s2-l2a-cogs/5/C/MK/2018/10/S2B_5CMK_20181020_0_L2A/B01.tif";
        BasicAuthURI cogUri = new BasicAuthURI(fileUrl, false);
        HttpRangeReader rangeReader = new HttpRangeReader(cogUri.getUri(), CogImageReadParam.DEFAULT_HEADER_LENGTH);
        
        
        CogSourceSPIProvider input = new CogSourceSPIProvider(
                cogUri,
                new CogImageReaderSpi(),
                new CogImageInputStreamSpi(),
                rangeReader.getClass().getName());

        
        
      GeoTiffReader reader = new GeoTiffReader(input);
      
      GridCoverage2D coverage = reader.read(null);
//      CoordinateReferenceSystem crs = reader.getCoordinateReferenceSystem();

      {
          Point2D.Double pos = new Point2D.Double(2614053.61, 1258756.05);
          double[] height = new double[1];
          coverage.evaluate(pos,height);
          System.out.println(height[0]);
      }
      {
          Point2D.Double pos = new Point2D.Double(2625592, 1239628);
          double[] height = new double[1];
          coverage.evaluate(pos,height);
          System.out.println(height[0]);
      }
      
      coverage.dispose(true);
      reader.dispose();
      
//      System.out.println(coverage.getEnvelope());
//      System.out.println(crs);      
//      System.out.println(pos);
        
        System.out.println("foo");
        
        Set<Thread> threadSet = Thread.getAllStackTraces().keySet();
        for (Thread t : threadSet) {
            System.out.println("Thread: " + t.getName() + " | Daemon: " + t.isDaemon());
        }
        
        // OkHttpClient (von http cog reader (z.B. w√ºrde aws sdk verwenden)) hat keep alive von 60s. Weil es ein non-daemon thread ist,
        // wird solange gewartet, bis sich das Programm beendet. Als Server-Anwendung wohl egal. Ggf. beim Herunterfahren Probleme?
        System.exit(0);
    }
    
//    public static double getHeightAtCoordinate(GridCoverage2D coverage, double lon, double lat) throws TransformException {
//        // Get the coordinate reference system
//        CoordinateReferenceSystem crs = coverage.getCoordinateReferenceSystem2D();
//        
//        // Transform world coordinates (lon, lat) to image (grid) coordinates
//        MathTransform transform = CRS.findMathTransform(CRS.decode("EPSG:4326"), crs, true);
//        DirectPosition worldPos = new DirectPosition(lon, lat);
//        DirectPosition gridPos = new DirectPosition();
//        transform.transform(worldPos, gridPos);
//
//        // Sample the raster at the computed grid position
//        double[] value = new double[1];
//        coverage.evaluate(gridPos, value);
//        return value[0]; // Elevation value
//    }

}
